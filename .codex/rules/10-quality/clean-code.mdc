---
description: Clean code expectations for Codex-assisted contributions across Python and supporting scripts
globs:
  - "**/*.py"
  - "**/*.pyi"
  - "**/*.sh"
  - "**/*.md"
  - "tests/**/*"
alwaysApply: false
---

# Clean Code Guidelines

## Python Fundamentals
- Follow PEP 8 conventions unless the surrounding file dictates otherwise.
- Prefer expressive names and small, single-purpose functions.
- Use type hints where they clarify intent; avoid unnecessary annotations on trivial helpers.
- Prevent common pitfalls (e.g., no mutable default arguments, close resources promptly).

## Structure & Readability
- Replace magic numbers or strings with well-named constants.
- Keep related logic co-located and extract shared behavior into helpers when duplication appears.
- Document "why" with brief comments only when the intent is non-obvious; keep the code self-explanatory.

## Error Handling & Logging
- Surface actionable error messages and preserve original stack traces when re-raising.
- Avoid swallowing exceptions silently; log or handle them at an appropriate layer.
- Use structured logging or context managers when available to keep output consistent.

## Testing Discipline
- Add or update tests alongside behavior changes; cover happy paths and meaningful edge cases.
- Place new tests near existing suites (typically under `tests/`) and keep fixtures lightweight.
- Run `pytest` or relevant runners when feasible and document any skipped checks.

## Shell & Tooling Scripts
- Start scripts with `set -euo pipefail` (or the project-approved variant) to surface failures early.
- Prefer long-form options and quote variables that might contain spaces or globs.
- Keep scripts idempotent when possible and avoid mixing user interaction with automation logic.

## Documentation & Maintenance
- Update README, CLI help text, or docstrings when interfaces change.
- Maintain consistent Markdown style (wrapping, heading levels, code fences with language tags).
- Leave the codebase cleaner than you found it by fixing nearby low-effort issues when safe.
