---
description: Task execution workflow optimized for Codex CLI effectiveness
alwaysApply: false
---

## Pre-Task Triage
- Confirm the user's end goal, constraints, and any delivery preferences.
- Inspect relevant files and recent changes before modifying anything.
- Note harness limitations (sandbox level, approval policy, network access) and plan accordingly.

## Planning
- Create a plan when the task involves multiple steps, uncertainty, or cross-file work.
- Keep exactly one step marked as in progress and update the plan after completing each step.
- Skip planning only for straightforward, single-action tasks to maintain velocity.

## Implementation Practices
- Favor incremental edits with frequent context checks to avoid regressions.
- Mirror existing patterns, naming, and architecture in the touched area.
- When generating code, provide the final edited file content rather than manual edit instructions.
- Surface assumptions or decisions that might warrant user confirmation.

## Validation & Testing
- Run the narrowest useful test or linter commands; capture essential output for the user.
- If a required check cannot run (e.g., sandbox limits), explain why and suggest how to execute it locally.
- Re-run impacted suites after significant refactors to ensure stability.

## Wrap-Up & Communication
- Follow Codex final-answer formatting: lead with the outcome, keep bullets concise, and reference files with inline code paths.
- Highlight remaining risks, manual steps, or follow-up work.
- Suggest logical next actions only when they add value (e.g., run `pytest`, open a PR).

## Anti-Patterns to Avoid
- Skipping context gathering and editing blindly.
- Delivering multi-step manual instructions when Codex could apply the change directly.
- Ignoring validation steps or failing to disclose when tests were not run.
- Providing verbose command outputs instead of concise summaries.
